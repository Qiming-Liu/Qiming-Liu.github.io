{"version":3,"sources":["pages/404/index.js","utils/prerender.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/DecoderText/index.js","components/Text/index.js"],"names":["NotFound","className","tag","name","content","appear","in","timeout","onEnter","reflow","status","classNames","level","aria-hidden","as","text","start","delay","secondary","iconHoverShift","href","icon","prerender","navigator","userAgent","Heading","children","align","weight","rest","clampedLevel","Math","min","max","Component","Helmet","rel","GothamBold","crossorigin","glyphs","CharType","DecoderText","startDelay","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","chain","spring","from","to","stiffness","damping","stop","ref","memo","Text","size"],"mappings":"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","file":"static/js/3.3bc190bb.chunk.js","sourcesContent":["import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { Helmet } from 'react-helmet';\nimport { Button } from 'components/Button';\nimport DecoderText from 'components/DecoderText';\nimport { reflow } from 'utils/transition';\nimport Heading from 'components/Heading';\nimport Text from 'components/Text';\nimport './index.css';\n\nfunction NotFound() {\n  return (\n    <section className=\"page-404\">\n      <Helmet>\n        <title tag=\"title\">404 | Not Found</title>\n        <meta name=\"description\" content=\"404 page not found. This page doesn't exist\" />\n      </Helmet>\n      <Transition appear in={true} timeout={0} onEnter={reflow}>\n        {status => (\n          <Fragment>\n            <div className=\"page-404__details\">\n              <div className=\"page-404__text\">\n                <Heading\n                  className={classNames('page-404__title', `page-404__title--${status}`)}\n                  level={0}\n                >\n                  404\n                </Heading>\n                <Heading\n                  aria-hidden\n                  className={classNames(\n                    'page-404__subheading',\n                    `page-404__subheading--${status}`\n                  )}\n                  as=\"h2\"\n                  level={3}\n                >\n                  <DecoderText\n                    text=\"Error: Redacted\"\n                    start={status !== 'exited'}\n                    delay={300}\n                  />\n                </Heading>\n                <Text\n                  className={classNames(\n                    'page-404__description',\n                    `page-404__description--${status}`\n                  )}\n                >\n                  This page is coming soon.\n                </Text>\n                <Button\n                  secondary\n                  iconHoverShift\n                  className={classNames(\n                    'page-404__button',\n                    `page-404__button--${status}`\n                  )}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </Transition>\n    </section>\n  );\n}\n\nexport default NotFound;\n","/**\n * Returns true if being prerendered by react-snap. Useful for stuff\n * that needs to only run client-side and not during prerendering\n */\nconst prerender = navigator.userAgent === 'ReactSnap';\nexport default prerender;\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport prerender from 'utils/prerender';\nimport './index.css';\n\n// prettier-ignore\nconst glyphs = [\n  'ア', 'イ', 'ウ', 'エ', 'オ',\n  'カ', 'キ', 'ク', 'ケ', 'コ',\n  'サ', 'シ', 'ス', 'セ', 'ソ',\n  'タ', 'チ', 'ツ', 'テ', 'ト',\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\n  'マ', 'ミ', 'ム', 'メ', 'モ',\n  'ヤ', 'ユ', 'ヨ', 'ー',\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\n];\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !prerender) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n"],"sourceRoot":""}