{"version":3,"sources":["combination/ProjectLayout/index.js","pages/Weather/index.js","utils/prerender.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/Footer/index.js","components/Section/index.js","utils/image.js","components/Image/index.js"],"names":["ProjectHeader","title","description","linkLabel","url","columns","className","Section","classNames","style","numToMs","Heading","prerender","level","as","Text","size","Button","secondary","iconHoverShift","icon","href","length","map","role","index","initDelay","ProjectContainer","rest","ProjectSection","forwardRef","light","first","fullHeight","backgroundOverlayOpacity","backgroundElement","children","ref","ProjectSectionContent","width","ProjectSectionHeading","align","ProjectSectionText","ProjectTextRow","center","stretch","justify","noMargin","centerMobile","DisplacementSphere","lazy","Weather","Helmet","fallback","Footer","navigator","userAgent","weight","clampedLevel","Math","min","max","Component","rel","GothamBold","crossorigin","Date","getFullYear","async","getImageFromSrcSet","src","srcSet","sizes","Promise","resolve","reject","Error","tempImage","Image","srcset","onLoad","removeEventListener","source","currentSrc","addEventListener","error","resolveVideoSrcFromSrcSet","sources","split","srcString","image","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","toDataURL","remove","generateImage","Number","replace","fakeSrcSet","join","fakeSrc","find","ImageElements","loaded","inViewport","placeholder","delay","alt","play","reveal","prefersReducedMotion","usePrefersReducedMotion","showPlaceholder","setShowPlaceholder","useState","playing","setPlaying","showPlayButton","setShowPlayButton","isHovered","setIsHovered","isFocused","setIsFocused","placeholderSize","setPlaceholderSize","videoSrc","setVideoSrc","placeholderRef","useRef","videoRef","isVideo","endsWith","imgSrc","showFullRes","useEffect","purgePlaceholder","placeholderElement","current","resolvedVideoSrc","resolveVideoSrc","pause","togglePlaying","event","preventDefault","paused","handleFocusPlayButton","onMouseOver","undefined","onMouseOut","muted","loop","playsInline","autoPlay","onLoadStart","aria-label","in","onExit","reflow","onExited","timeout","enter","exit","msToNum","tokens","base","durationS","status","visible","onFocus","onBlur","onClick","decoding","aria-hidden","target","raised","setLoaded","themeId","useTheme","containerRef","useInViewport","useCallback"],"mappings":"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","file":"static/js/5.1ebd9933.chunk.js","sourcesContent":["import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport Image from 'components/Image';\nimport { Button } from 'components/Button';\nimport { useParallax } from 'hooks';\nimport prerender from 'utils/prerender';\nimport Section from 'components/Section';\nimport { numToPx, numToMs } from 'utils/style';\nimport Heading from 'components/Heading';\nimport Text from 'components/Text';\nimport './index.css';\n\nconst initDelay = 300;\n\nexport function ProjectHeader({\n  title,\n  description,\n  linkLabel = 'Visit website',\n  url,\n  columns,\n  className,\n}) {\n  return (\n    <Section className={classNames('project__header', className)}>\n      <div\n        className=\"project__header-content\"\n        style={{ '--initDelay': numToMs(initDelay) }}\n      >\n        <div className=\"project__details\">\n          <Heading\n            className={classNames('project__title', {\n              'project__title--entered': !prerender,\n            })}\n            level={2}\n            as=\"h1\"\n          >\n            {title}\n          </Heading>\n          <Text\n            className={classNames('project__description', {\n              'project__description--entered': !prerender,\n            })}\n            size=\"xl\"\n          >\n            {description}\n          </Text>\n          {!!url && (\n            <Button\n              secondary\n              iconHoverShift\n              className={classNames('project__link-button', {\n                'project__link-button--entered': !prerender,\n              })}\n              icon=\"chevronRight\"\n              href={url}\n            >\n              {linkLabel}\n            </Button>\n          )}\n        </div>\n        {!!columns?.length && (\n          <ul className=\"project__meta\">\n            {columns?.map((role, index) => (\n              <li\n                className={classNames('project__meta-item', {\n                  'project__meta-item--entered': !prerender,\n                })}\n                style={{ '--delay': numToMs(initDelay + 300 + index * 140) }}\n                key={role}\n              >\n                <Text secondary as=\"span\">\n                  {role}\n                </Text>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </Section>\n  );\n}\n\nexport const ProjectContainer = ({ className, ...rest }) => (\n  <article className={classNames('project', className)} {...rest} />\n);\n\nexport const ProjectSection = forwardRef(\n  (\n    {\n      className,\n      light,\n      first,\n      fullHeight,\n      backgroundOverlayOpacity = 0.9,\n      backgroundElement,\n      children,\n      ...rest\n    },\n    ref\n  ) => (\n    <section\n      className={classNames('project__section', className, {\n        'project__section--light': light,\n        'project__section--full-height': fullHeight,\n      })}\n      ref={ref}\n      {...rest}\n    >\n      {!!backgroundElement && (\n        <div\n          className=\"project__section-background\"\n          style={{ '--opacity': backgroundOverlayOpacity }}\n        >\n          {backgroundElement}\n        </div>\n      )}\n      <Section\n        className={classNames('project__section-inner', {\n          'project__section-inner--first': first,\n        })}\n      >\n        {children}\n      </Section>\n    </section>\n  )\n);\n\nexport const ProjectBackground = ({ opacity = 0.7, className, entered, ...rest }) => {\n  const offset = useParallax(0.6);\n\n  return (\n    <div\n      className={classNames('project__background-image', className, {\n        'project__background-image--entered': entered,\n      })}\n    >\n      <div\n        className=\"project__background-image-element\"\n        style={{\n          '--offset': numToPx(offset),\n        }}\n      >\n        <Image alt=\"\" role=\"presentation\" {...rest} />\n      </div>\n      <div className=\"project__background-scrim\" style={{ '--opacity': opacity }} />\n    </div>\n  );\n};\n\nexport const ProjectImage = ({ className, ...rest }) => (\n  <div className={classNames('project__image', className)}>\n    <Image reveal delay={300} {...rest} />\n  </div>\n);\n\nexport const ProjectSectionContent = ({ className, width = 'l', ...rest }) => (\n  <div\n    className={classNames(\n      'project__section-content',\n      `project__section-content--width-${width}`,\n      className\n    )}\n    {...rest}\n  />\n);\n\nexport const ProjectSectionHeading = ({ className, level = 3, as = 'h2', ...rest }) => (\n  <Heading\n    className={classNames('project__section-heading', className)}\n    as={as}\n    level={level}\n    align=\"auto\"\n    {...rest}\n  />\n);\n\nexport const ProjectSectionText = ({ className, ...rest }) => (\n  <Text className={classNames('project__section-text', className)} size=\"l\" {...rest} />\n);\n\nexport const ProjectTextRow = ({\n  center,\n  stretch,\n  justify = 'center',\n  width = 'm',\n  noMargin,\n  className,\n  centerMobile,\n  ...rest\n}) => (\n  <div\n    className={classNames(\n      'project__text-row',\n      `project__text-row--justify-${justify}`,\n      `project__text-row--width-${width}`,\n      className,\n      {\n        'project__text-row--center': center,\n        'project__text-row--stretch': stretch,\n        'project__text-row--center-mobile': centerMobile,\n        'project__text-row--no-margin': noMargin,\n      }\n    )}\n    {...rest}\n  />\n);\n\nexport const ProjectSectionColumns = ({ className, centered, ...rest }) => (\n  <ProjectSectionContent\n    className={classNames(\n      'project__section-columns',\n      { 'project__section-columns--centered': centered },\n      className\n    )}\n    {...rest}\n  />\n);\n","import './index.css';\n\nimport { Fragment, Suspense, lazy } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Footer from 'components/Footer';\n\nimport {\n  ProjectContainer,\n  ProjectSection,\n  ProjectSectionContent,\n  ProjectHeader,\n  ProjectSectionHeading,\n  ProjectSectionText,\n  ProjectTextRow,\n} from 'combination/ProjectLayout';\n\nconst DisplacementSphere = lazy(() => import('pages/Home/DisplacementSphere'));\n// const WeatherCard = lazy(() => import('combination/WeatherCard'));\n\nconst title = 'Weather Web Application';\nconst description =\n  'You can input a city name to show the current weather in that city area and the forecast for the upcoming 3 days. I use www.weatherapi.com, which provides a free API to query weather data.';\nconst columns = ['React', 'Axios', 'WeatherAPI'];\n\nconst Weather = () => {\n  return (\n    <Fragment>\n      <Helmet>\n        <title>Weather | Qiming Liu</title>\n      </Helmet>\n      <Suspense fallback={null}>\n        <DisplacementSphere />\n      </Suspense>\n      <ProjectContainer className=\"weathera\">\n        <ProjectHeader title={title} description={description} columns={columns} />\n        <ProjectSection first>\n          {/* <WeatherCard /> */}\n        </ProjectSection>\n        <ProjectSection>\n          <ProjectSectionContent>\n            <ProjectTextRow center centerMobile noMargin>\n              <ProjectSectionHeading>Review</ProjectSectionHeading>\n              <ProjectSectionText>What I learned from this project.</ProjectSectionText>\n            </ProjectTextRow>\n          </ProjectSectionContent>\n        </ProjectSection>\n      </ProjectContainer>\n      <Footer />\n    </Fragment>\n  );\n};\n\nexport default Weather;\n","/**\n * Returns true if being prerendered by react-snap. Useful for stuff\n * that needs to only run client-side and not during prerendering\n */\nconst prerender = navigator.userAgent === 'ReactSnap';\nexport default prerender;\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n","import './index.css';\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <span className=\"footer__date\">{`© ${new Date().getFullYear()} Qiming Liu`}</span>\n  </footer>\n);\n\nexport default Footer;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","/**\n * Uses the browser's image loading to get the correct image src from a srcSet\n */\nexport async function getImageFromSrcSet({ src, srcSet, sizes }) {\n  return new Promise((resolve, reject) => {\n    try {\n      if (!src && !srcSet) {\n        throw new Error('No image src or srcSet provided');\n      }\n\n      const tempImage = new Image();\n\n      if (src) {\n        tempImage.src = src;\n      }\n\n      if (srcSet) {\n        tempImage.srcset = srcSet;\n      }\n\n      if (sizes) {\n        tempImage.sizes = sizes;\n      }\n\n      const onLoad = () => {\n        tempImage.removeEventListener('load', onLoad);\n        const source = tempImage.currentSrc;\n        resolve(source);\n      };\n\n      tempImage.addEventListener('load', onLoad);\n    } catch (error) {\n      reject(`Error loading ${srcSet}: ${error}`);\n    }\n  });\n}\n\n/**\n * Generates a transparent png of a given width and height\n */\nexport function generateImage(width = 1, height = 1) {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  canvas.width = width;\n  canvas.height = height;\n\n  ctx.fillStyle = 'rgba(0, 0, 0, 0)';\n  ctx.fillRect(0, 0, width, height);\n  const image = canvas.toDataURL('image/png', '');\n  canvas.remove();\n  return image;\n}\n\n/**\n * Use native image srcSet resolution for video sources\n */\nexport async function resolveVideoSrcFromSrcSet(srcSet) {\n  const sources = srcSet.split(', ').map(srcString => {\n    const [src, width] = srcString.split(' ');\n    const image = generateImage(Number(width.replace('w', '')));\n    return { src, image, width };\n  });\n\n  const fakeSrcSet = sources.map(({ image, width }) => `${image} ${width}`).join(', ');\n  const fakeSrc = await getImageFromSrcSet({ srcSet: fakeSrcSet });\n\n  const videoSrc = sources.find(src => src.image === fakeSrc);\n  return videoSrc.src;\n}\n","import { useState, useEffect, useRef, useCallback, Fragment } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion, useInViewport } from 'hooks';\nimport { Button } from 'components/Button';\nimport Icon from 'components/Icon';\nimport { Transition } from 'react-transition-group';\nimport { reflow } from 'utils/transition';\nimport prerender from 'utils/prerender';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToMs } from 'utils/style';\nimport { resolveVideoSrcFromSrcSet } from 'utils/image';\nimport { useTheme } from 'components/ThemeProvider';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport './index.css';\n\nconst Image = ({ className, style, reveal, delay = 0, raised, src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n  const { themeId } = useTheme();\n  const containerRef = useRef();\n  const inViewport = useInViewport(containerRef, !src?.endsWith('.mp4'));\n\n  const onLoad = useCallback(() => {\n    setLoaded(true);\n  }, []);\n\n  return (\n    <div\n      className={classNames('image', className, `image--${themeId}`, {\n        'image--in-viewport': inViewport,\n        'image--reveal': reveal,\n        'image--raised': raised,\n      })}\n      style={{ ...style, '--delay': numToMs(delay) }}\n      ref={containerRef}\n    >\n      <ImageElements\n        delay={delay}\n        onLoad={onLoad}\n        loaded={loaded}\n        inViewport={inViewport}\n        reveal={reveal}\n        src={src}\n        {...rest}\n      />\n    </div>\n  );\n};\n\nconst ImageElements = ({\n  onLoad,\n  loaded,\n  inViewport,\n  srcSet,\n  placeholder,\n  delay,\n  src,\n  alt,\n  play = true,\n  reveal,\n  ...rest\n}) => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n  const [showPlaceholder, setShowPlaceholder] = useState(true);\n  const [playing, setPlaying] = useState(!prefersReducedMotion);\n  const [showPlayButton, setShowPlayButton] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [placeholderSize, setPlaceholderSize] = useState();\n  const [videoSrc, setVideoSrc] = useState();\n  const placeholderRef = useRef();\n  const videoRef = useRef();\n  const isVideo = src?.endsWith('.mp4');\n  const imgSrc = src || srcSet?.split(' ')[0];\n  const showFullRes = !prerender && inViewport;\n\n  useEffect(() => {\n    const purgePlaceholder = () => {\n      setShowPlaceholder(false);\n    };\n\n    const placeholderElement = placeholderRef.current;\n    placeholderElement.addEventListener('transitionend', purgePlaceholder);\n\n    return function cleanUp() {\n      if (placeholderElement) {\n        placeholderElement.removeEventListener('transitionend', purgePlaceholder);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const resolveVideoSrc = async () => {\n      const resolvedVideoSrc = await resolveVideoSrcFromSrcSet(srcSet);\n      setVideoSrc(resolvedVideoSrc);\n    };\n\n    if (isVideo && srcSet) {\n      resolveVideoSrc();\n    } else if (isVideo) {\n      setVideoSrc(src);\n    }\n  }, [isVideo, src, srcSet]);\n\n  useEffect(() => {\n    const { width, height } = placeholderRef.current;\n\n    if (width && height) {\n      setPlaceholderSize({ width, height });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!videoRef.current || !videoSrc) return;\n\n    if (!play || !inViewport) {\n      setPlaying(false);\n      videoRef.current.pause();\n    } else if (inViewport && !prefersReducedMotion && !prerender) {\n      setPlaying(true);\n      videoRef.current.play();\n    }\n  }, [inViewport, play, prefersReducedMotion, videoSrc]);\n\n  const handlePlaceholderLoad = event => {\n    const { width, height } = event.target;\n    setPlaceholderSize({ width, height });\n  };\n\n  const togglePlaying = event => {\n    event.preventDefault();\n\n    if (videoRef.current.paused) {\n      setPlaying(true);\n      videoRef.current.play();\n    } else {\n      setPlaying(false);\n      videoRef.current.pause();\n    }\n  };\n\n  const handleShowPlayButton = () => {\n    setShowPlayButton(true);\n    setIsHovered(true);\n  };\n\n  const handleFocusPlayButton = () => {\n    setShowPlayButton(true);\n    setIsFocused(true);\n  };\n\n  return (\n    <div\n      className={classNames('image__element-wrapper', {\n        'image__element-wrapper--reveal': reveal,\n        'image__element-wrapper--in-viewport': inViewport,\n      })}\n      onMouseOver={isVideo ? handleShowPlayButton : undefined}\n      onMouseOut={isVideo ? () => setIsHovered(false) : undefined}\n      style={{ '--delay': numToMs(delay + 1000) }}\n    >\n      {isVideo && (\n        <Fragment>\n          <video\n            muted\n            loop\n            playsInline\n            className={classNames('image__element', { 'image__element--loaded': loaded })}\n            autoPlay={!prefersReducedMotion}\n            role=\"img\"\n            onLoadStart={onLoad}\n            src={videoSrc}\n            aria-label={alt}\n            ref={videoRef}\n            {...rest}\n          />\n          <Transition\n            in={isHovered || isFocused}\n            onExit={reflow}\n            onExited={() => setShowPlayButton(false)}\n            timeout={{ enter: 0, exit: msToNum(tokens.base.durationS) }}\n          >\n            {status => (\n              <VisuallyHidden visible={showPlayButton}>\n                <Button\n                  className={classNames('image__button', `image__button--${status}`)}\n                  onFocus={handleFocusPlayButton}\n                  onBlur={() => setIsFocused(false)}\n                  onClick={togglePlaying}\n                >\n                  <Icon icon={playing ? 'pause' : 'play'} />\n                  {playing ? 'Pause' : 'Play'}\n                </Button>\n              </VisuallyHidden>\n            )}\n          </Transition>\n        </Fragment>\n      )}\n      {!isVideo && (\n        <img\n          className={classNames('image__element', { 'image__element--loaded': loaded })}\n          onLoad={onLoad}\n          decoding=\"async\"\n          src={showFullRes ? imgSrc : undefined}\n          srcSet={showFullRes ? srcSet : undefined}\n          width={placeholderSize?.width}\n          height={placeholderSize?.height}\n          alt={alt}\n          {...rest}\n        />\n      )}\n      {showPlaceholder && (\n        <img\n          aria-hidden\n          className={classNames('image__placeholder', {\n            'image__placeholder--loaded': loaded,\n          })}\n          style={{ '--delay': numToMs(delay) }}\n          ref={placeholderRef}\n          src={placeholder}\n          onLoad={handlePlaceholderLoad}\n          width={placeholderSize?.width}\n          height={placeholderSize?.height}\n          decoding=\"async\"\n          alt=\"\"\n          role=\"presentation\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Image;\n"],"sourceRoot":""}