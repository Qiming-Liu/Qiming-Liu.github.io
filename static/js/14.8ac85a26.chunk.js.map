{"version":3,"sources":["pages/Home/sphereFragShader.js","pages/Home/sphereVertShader.js","../node_modules/@babel/runtime/helpers/esm/construct.js","pages/Home/DisplacementSphere.js"],"names":["Parent","args","Class","isNativeReflectConstruct","Reflect","construct","bind","a","push","apply","instance","Function","setPrototypeOf","prototype","arguments","DisplacementSphere","props","theme","useTheme","rgbBackground","themeId","colorWhite","start","useRef","Date","now","canvasRef","mouse","renderer","camera","scene","lights","uniforms","material","geometry","sphere","tweenRef","sphereSpring","prefersReducedMotion","usePrefersReducedMotion","isInViewport","useInViewport","windowSize","useWindowSize","useEffect","window","innerWidth","innerHeight","current","Vector2","WebGLRenderer","canvas","antialias","powerPreference","setSize","setPixelRatio","outputEncoding","sRGBEncoding","PerspectiveCamera","position","z","Scene","MeshPhongMaterial","onBeforeCompile","shader","UniformsUtils","merge","UniformsLib","time","type","value","vertexShader","vertShader","fragmentShader","fragShader","SphereBufferGeometry","Mesh","modifier","Math","random","add","cleanScene","cleanRenderer","dirLight","DirectionalLight","ambientLight","AmbientLight","x","y","background","Color","rgbToThreeColor","forEach","light","removeLights","width","height","adjustedHeight","aspect","updateProjectionMatrix","render","media","mobile","tablet","onMouseMove","event","rotation","clientX","clientY","toArray","values","set","spring","from","get","to","stiffness","damping","velocity","getVelocity","mass","restSpeed","addEventListener","removeEventListener","stop","animation","animate","requestAnimationFrame","undefined","cancelAnimationFrame","Transition","appear","in","onEnter","reflow","timeout","status","className","classNames","ref"],"mappings":"2IAAA,OAAc,2tE,gCCAd,OAcc,+kM,kECZC,SAAS,EAAWA,EAAQC,EAAMC,GAc/C,OAZE,EADE,OAAAC,EAAA,KACWC,QAAQC,UAAUC,OAElB,SAAoBN,EAAQC,EAAMC,GAC7C,IAAIK,EAAI,CAAC,MACTA,EAAEC,KAAKC,MAAMF,EAAGN,GAChB,IACIS,EAAW,IADGC,SAASL,KAAKG,MAAMT,EAAQO,IAG9C,OADIL,GAAO,OAAAU,EAAA,GAAeF,EAAUR,EAAMW,WACnCH,GAIJ,EAAWD,MAAM,KAAMK,W,iICkMjBC,UArLY,SAAAC,GACzB,IAAMC,EAAQC,cACNC,EAAuCF,EAAvCE,cAAeC,EAAwBH,EAAxBG,QAASC,EAAeJ,EAAfI,WAC1BC,EAAQC,iBAAOC,KAAKC,OACpBC,EAAYH,mBACZI,EAAQJ,mBACRK,EAAWL,mBACXM,EAASN,mBACTO,EAAQP,mBACRQ,EAASR,mBACTS,EAAWT,mBACXU,EAAWV,mBACXW,EAAWX,mBACXY,EAASZ,mBACTa,EAAWb,mBACXc,EAAed,mBACfe,EAAuBC,cACvBC,EAAeC,YAAcf,GAC7BgB,EAAaC,cAqJnB,OAnJAC,qBAAU,WACR,MAAoCC,OAA5BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAqCpB,OApCApB,EAAMqB,QAAU,IAAIC,KAAQ,GAAK,IACjCrB,EAASoB,QAAU,IAAIE,KAAc,CACnCC,OAAQzB,EAAUsB,QAClBI,WAAW,EACXC,gBAAiB,qBAEnBzB,EAASoB,QAAQM,QAAQR,EAAYC,GACrCnB,EAASoB,QAAQO,cAAc,GAC/B3B,EAASoB,QAAQQ,eAAiBC,KAElC5B,EAAOmB,QAAU,IAAIU,IAAkB,GAAIZ,EAAaC,EAAa,GAAK,KAC1ElB,EAAOmB,QAAQW,SAASC,EAAI,GAE5B9B,EAAMkB,QAAU,IAAIa,KAEpB5B,EAASe,QAAU,IAAIc,IACvB7B,EAASe,QAAQe,gBAAkB,SAAAC,GACjChC,EAASgB,QAAUiB,KAAcC,MAAM,CACrCC,KAAW,QACXA,KAAW,OACXH,EAAOhC,SACP,CAAEoC,KAAM,CAAEC,KAAM,IAAKC,MAAO,MAG9BN,EAAOhC,SAAWA,EAASgB,QAC3BgB,EAAOO,aAAeC,UACtBR,EAAOS,eAAiBC,WAG1BxC,EAASc,QAAU,IAAI2B,KAAqB,GAAI,IAAK,KAErDxC,EAAOa,QAAU,IAAI4B,IAAK1C,EAASc,QAASf,EAASe,SACrDb,EAAOa,QAAQW,SAASC,EAAI,EAC5BzB,EAAOa,QAAQ6B,SAAWC,KAAKC,SAC/BjD,EAAMkB,QAAQgC,IAAI7C,EAAOa,SAElB,WACLiC,YAAWnD,EAAMkB,SACjBkC,YAActD,EAASoB,YAExB,IAEHJ,qBAAU,WACR,IAAMuC,EAAW,IAAIC,IAAiB/D,EAAY,IAC5CgE,EAAe,IAAIC,IAAajE,EAAwB,UAAZD,EAAsB,GAAM,IAU9E,OARA+D,EAASxB,SAASC,EAAI,IACtBuB,EAASxB,SAAS4B,EAAI,IACtBJ,EAASxB,SAAS6B,EAAI,IAEtBzD,EAAOiB,QAAU,CAACmC,EAAUE,GAC5BvD,EAAMkB,QAAQyC,WAAd,EAA+BC,IAA/B,YAAwCC,YAAgBxE,KACxDY,EAAOiB,QAAQ4C,SAAQ,SAAAC,GAAK,OAAI/D,EAAMkB,QAAQgC,IAAIa,MAE3C,WACLC,YAAa/D,EAAOiB,YAErB,CAAC7B,EAAeE,EAAYD,IAE/BwB,qBAAU,WACR,IAAQmD,EAAkBrD,EAAlBqD,MAAOC,EAAWtD,EAAXsD,OAETC,EAAiBD,EAAkB,GAATA,EAChCpE,EAASoB,QAAQM,QAAQyC,EAAOE,GAChCpE,EAAOmB,QAAQkD,OAASH,EAAQE,EAChCpE,EAAOmB,QAAQmD,yBAGX7D,GACFV,EAASoB,QAAQoD,OAAOtE,EAAMkB,QAASnB,EAAOmB,SAG5C+C,GAASM,IAAMC,QACjBnE,EAAOa,QAAQW,SAAS4B,EAAI,GAC5BpD,EAAOa,QAAQW,SAAS6B,EAAI,IACnBO,GAASM,IAAME,QACxBpE,EAAOa,QAAQW,SAAS4B,EAAI,GAC5BpD,EAAOa,QAAQW,SAAS6B,EAAI,KAE5BrD,EAAOa,QAAQW,SAAS4B,EAAI,GAC5BpD,EAAOa,QAAQW,SAAS6B,EAAI,MAE7B,CAAClD,EAAsBI,IAE1BE,qBAAU,WACR,IAAM4D,EAAc,SAAAC,GAClB,IAAQC,EAAavE,EAAOa,QAApB0D,SAEF/C,EACD8C,EAAME,QAAU9D,OAAOC,WADtBa,EAED8C,EAAMG,QAAU/D,OAAOE,YAGvBV,EAAaW,UAChBX,EAAaW,QAAUsB,YAAMoC,EAASG,WAAW,SAAAC,GAAM,OACrDJ,EAASK,IAAID,EAAO,GAAIA,EAAO,GAAI3E,EAAOa,QAAQ0D,SAAS9C,OAI/DxB,EAASY,QAAUgE,YAAO,CACxBC,KAAM5E,EAAaW,QAAQkE,MAC3BC,GAAI,CAACxD,EAAa,EAAGA,EAAa,GAClCyD,UAAW,GACXC,QAAS,GACTC,SAAUjF,EAAaW,QAAQuE,cAC/BC,KAAM,EACNC,UAAW,OACVnG,MAAMe,EAAaW,UAOxB,OAJKV,GAAwBE,GAC3BK,OAAO6E,iBAAiB,YAAalB,GAGhC,WAAO,IAAD,EACX3D,OAAO8E,oBAAoB,YAAanB,GACxC,UAAApE,EAASY,eAAT,SAAkB4E,UAEnB,CAACpF,EAAcF,IAElBM,qBAAU,WACR,IAAIiF,EAmBJ,OANKvF,GAAwBE,EAXb,SAAVsF,IACJD,EAAYE,sBAAsBD,QAETE,IAArBhG,EAASgB,UACXhB,EAASgB,QAAQoB,KAAKE,MAAQ,MAAW9C,KAAKC,MAAQH,EAAM0B,UAG9Db,EAAOa,QAAQ0D,SAAS9C,GAAK,KAC7BhC,EAASoB,QAAQoD,OAAOtE,EAAMkB,QAASnB,EAAOmB,SAI9C8E,GAEAlG,EAASoB,QAAQoD,OAAOtE,EAAMkB,QAASnB,EAAOmB,SAGzC,WACLiF,qBAAqBJ,MAEtB,CAACrF,EAAcF,IAGhB,cAAC4F,EAAA,EAAD,CAAYC,QAAM,EAACC,IAAE,EAACC,QAASC,IAAQC,QAAS,IAAhD,SACG,SAAAC,GAAM,OACL,oCACE,iBACAC,UAAWC,IAAW,sBAAD,+BAAgDF,IACrEG,IAAKjH,GACDV,S","file":"static/js/14.8ac85a26.chunk.js","sourcesContent":["export default `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 newPosition;\nvarying float noise;\n\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <envmap_physical_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec3 color = vec3(vUv * (0.2 - 1.7 * noise), 1.0);\n  vec3 finalColors = vec3(color.g * 2.5 , color.r * 3.5 , color.b * 0.1);\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n  vec3 totalEmissiveRadiance = emissive;\n\n  #include <logdepthbuf_fragment>\n  #include <map_fragment>\n  #include <color_fragment>\n  #include <alphamap_fragment>\n  #include <alphatest_fragment>\n  #include <specularmap_fragment>\n  #include <normal_fragment_begin>\n  #include <normal_fragment_maps>\n  #include <emissivemap_fragment>\n  #include <lights_phong_fragment>\n  #include <lights_fragment_begin>\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n  #include <aomap_fragment>\n\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n  #include <envmap_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n}\n`;\n","//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nexport default `\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat turbulence(vec3 p) {\n  float w = 100.0;\n  float t = -.5;\n  for (float f = 1.0 ; f <= 10.0 ; f++) {\n    float power = pow(2.0, f);\n    t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n  }\n  return t;\n}\n\n// START\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying float noise;\n\nvarying vec3 vViewPosition;\n\nvoid main() {\n  #include <beginnormal_vertex>\n  #include <defaultnormal_vertex>\n  #include <begin_vertex>\n  #include <project_vertex>\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize(transformedNormal);\n  #endif\n\n  vViewPosition = - mvPosition.xyz;\n\n  vUv = uv;\n\n  noise = turbulence(0.01 * position + normal + time * 0.8);\n  vec3 displacement = vec3((position.x) * noise, position.y * noise, position.z * noise);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4((position + normal) + displacement, 1.0);\n}\n`;\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import './DisplacementSphere.css';\n\nimport classNames from 'classnames';\nimport { useTheme } from 'components/ThemeProvider';\nimport { useInViewport, usePrefersReducedMotion, useWindowSize } from 'hooks';\nimport { spring, value } from 'popmotion';\nimport { useEffect, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport {\n  AmbientLight,\n  Color,\n  DirectionalLight,\n  Mesh,\n  MeshPhongMaterial,\n  PerspectiveCamera,\n  Scene,\n  SphereBufferGeometry,\n  UniformsLib,\n  UniformsUtils,\n  Vector2,\n  WebGLRenderer,\n  sRGBEncoding,\n} from 'three';\nimport { media, rgbToThreeColor } from 'utils/style';\nimport { cleanRenderer, cleanScene, removeLights } from 'utils/three';\nimport { reflow } from 'utils/transition';\nimport fragShader from './sphereFragShader';\nimport vertShader from './sphereVertShader';\n\nconst DisplacementSphere = props => {\n  const theme = useTheme();\n  const { rgbBackground, themeId, colorWhite } = theme;\n  const start = useRef(Date.now());\n  const canvasRef = useRef();\n  const mouse = useRef();\n  const renderer = useRef();\n  const camera = useRef();\n  const scene = useRef();\n  const lights = useRef();\n  const uniforms = useRef();\n  const material = useRef();\n  const geometry = useRef();\n  const sphere = useRef();\n  const tweenRef = useRef();\n  const sphereSpring = useRef();\n  const prefersReducedMotion = usePrefersReducedMotion();\n  const isInViewport = useInViewport(canvasRef);\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    const { innerWidth, innerHeight } = window;\n    mouse.current = new Vector2(0.8, 0.5);\n    renderer.current = new WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: false,\n      powerPreference: 'high-performance',\n    });\n    renderer.current.setSize(innerWidth, innerHeight);\n    renderer.current.setPixelRatio(1);\n    renderer.current.outputEncoding = sRGBEncoding;\n\n    camera.current = new PerspectiveCamera(54, innerWidth / innerHeight, 0.1, 100);\n    camera.current.position.z = 52;\n\n    scene.current = new Scene();\n\n    material.current = new MeshPhongMaterial();\n    material.current.onBeforeCompile = shader => {\n      uniforms.current = UniformsUtils.merge([\n        UniformsLib['ambient'],\n        UniformsLib['lights'],\n        shader.uniforms,\n        { time: { type: 'f', value: 0 } },\n      ]);\n\n      shader.uniforms = uniforms.current;\n      shader.vertexShader = vertShader;\n      shader.fragmentShader = fragShader;\n    };\n\n    geometry.current = new SphereBufferGeometry(32, 128, 128);\n\n    sphere.current = new Mesh(geometry.current, material.current);\n    sphere.current.position.z = 0;\n    sphere.current.modifier = Math.random();\n    scene.current.add(sphere.current);\n\n    return () => {\n      cleanScene(scene.current);\n      cleanRenderer(renderer.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    const dirLight = new DirectionalLight(colorWhite, 0.6);\n    const ambientLight = new AmbientLight(colorWhite, themeId === 'light' ? 0.8 : 0.1);\n\n    dirLight.position.z = 200;\n    dirLight.position.x = 100;\n    dirLight.position.y = 100;\n\n    lights.current = [dirLight, ambientLight];\n    scene.current.background = new Color(...rgbToThreeColor(rgbBackground));\n    lights.current.forEach(light => scene.current.add(light));\n\n    return () => {\n      removeLights(lights.current);\n    };\n  }, [rgbBackground, colorWhite, themeId]);\n\n  useEffect(() => {\n    const { width, height } = windowSize;\n\n    const adjustedHeight = height + height * 0.3;\n    renderer.current.setSize(width, adjustedHeight);\n    camera.current.aspect = width / adjustedHeight;\n    camera.current.updateProjectionMatrix();\n\n    // Render a single frame on resize when not animating\n    if (prefersReducedMotion) {\n      renderer.current.render(scene.current, camera.current);\n    }\n\n    if (width <= media.mobile) {\n      sphere.current.position.x = 14;\n      sphere.current.position.y = 10;\n    } else if (width <= media.tablet) {\n      sphere.current.position.x = 18;\n      sphere.current.position.y = 14;\n    } else {\n      sphere.current.position.x = 22;\n      sphere.current.position.y = 16;\n    }\n  }, [prefersReducedMotion, windowSize]);\n\n  useEffect(() => {\n    const onMouseMove = event => {\n      const { rotation } = sphere.current;\n\n      const position = {\n        x: event.clientX / window.innerWidth,\n        y: event.clientY / window.innerHeight,\n      };\n\n      if (!sphereSpring.current) {\n        sphereSpring.current = value(rotation.toArray(), values =>\n          rotation.set(values[0], values[1], sphere.current.rotation.z)\n        );\n      }\n\n      tweenRef.current = spring({\n        from: sphereSpring.current.get(),\n        to: [position.y / 2, position.x / 2],\n        stiffness: 30,\n        damping: 20,\n        velocity: sphereSpring.current.getVelocity(),\n        mass: 2,\n        restSpeed: 0.0001,\n      }).start(sphereSpring.current);\n    };\n\n    if (!prefersReducedMotion && isInViewport) {\n      window.addEventListener('mousemove', onMouseMove);\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      tweenRef.current?.stop();\n    };\n  }, [isInViewport, prefersReducedMotion]);\n\n  useEffect(() => {\n    let animation;\n\n    const animate = () => {\n      animation = requestAnimationFrame(animate);\n\n      if (uniforms.current !== undefined) {\n        uniforms.current.time.value = 0.00005 * (Date.now() - start.current);\n      }\n\n      sphere.current.rotation.z += 0.001;\n      renderer.current.render(scene.current, camera.current);\n    };\n\n    if (!prefersReducedMotion && isInViewport) {\n      animate();\n    } else {\n      renderer.current.render(scene.current, camera.current);\n    }\n\n    return () => {\n      cancelAnimationFrame(animation);\n    };\n  }, [isInViewport, prefersReducedMotion]);\n\n  return (\n    <Transition appear in onEnter={reflow} timeout={3000}>\n      {status => (\n        <canvas\n          aria-hidden\n          className={classNames('displacement-sphere', `displacement-sphere--${status}`)}\n          ref={canvasRef}\n          {...props}\n        />\n      )}\n    </Transition>\n  );\n};\n\nexport default DisplacementSphere;\n"],"sourceRoot":""}