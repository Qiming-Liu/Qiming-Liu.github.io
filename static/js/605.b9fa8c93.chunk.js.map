{"version":3,"file":"static/js/605.b9fa8c93.chunk.js","mappings":"0OASA,MAAMA,EACG,QADHA,EAEG,QAkBT,MAAMC,EAAcC,IAMb,IANc,KACnBC,EAAI,MACJC,GAAQ,EACRC,MAAOC,EAAa,EAAC,UACrBC,KACGC,GACJN,EACC,MAAMO,GAASC,EAAAA,EAAAA,QAAO,CAAC,CAAEC,KAAMX,EAAgBY,MAAO,MAChDC,GAAYH,EAAAA,EAAAA,UACZI,GAAeC,EAAAA,EAAAA,MA+CrB,OA7CAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAoBJ,EAAUK,QAC9BC,EAAUhB,EAAKiB,MAAM,IAC3B,IAAIC,EAEJ,MAAMC,EAAeA,KACnB,MAAMC,EAAed,EAAOS,QAAQM,KAAIC,GAC9B,8BAA6BA,EAAKd,SAASc,EAAKb,iBAG1DK,EAAkBS,UAAYH,EAAaI,KAAK,GAAG,EAG/CC,GAAchB,EAAAA,EAAAA,IAAM,GAAGiB,IAC3BpB,EAAOS,QAxCb,SAAiBC,EAASV,EAAQoB,GAChC,OAAOV,EAAQK,KAAI,CAACZ,EAAOkB,KACzB,GAAIA,EAAQD,EACV,MAAO,CAAElB,KAAMX,EAAgBY,SAGjC,GAAIiB,EAAW,EAAI,GAAK,CACtB,MAAME,EAAOC,KAAKC,MAAMD,KAAKE,SAAWC,EAAAA,EAAUC,QAClD,MAAO,CAAEzB,KAAMX,EAAgBY,MAAOuB,EAAAA,EAAUJ,GAClD,CAEA,MAAO,CAAEpB,KAAMX,EAAgBY,MAAOH,EAAOqB,GAAOlB,MAAO,GAE/D,CA2BuByB,CAAQlB,EAASV,EAAOS,QAASW,GAClDP,GAAc,IAuBhB,OApBIlB,GAAUiB,GAAcP,GAAiBwB,EAAAA,IAC3CjB,GAAYkB,EAAAA,EAAAA,KACVlC,EAAAA,EAAAA,IAAMC,IACNkC,EAAAA,EAAAA,IAAO,CACLC,KAAM,EACNC,GAAIvB,EAAQiB,OACZO,UAAW,EACXC,QAAS,KAEXxC,MAAMwB,IAGNd,IACFL,EAAOS,QAAUC,EAAQK,KAAI,CAACZ,EAAOkB,KAAK,CACxCnB,KAAMX,EACNY,MAAOO,EAAQW,OAEjBR,KAGK,KACDD,GACFA,EAAUwB,MACZ,CACD,GACA,CAAC/B,EAAcV,EAAOE,EAAYH,KAGnC2C,EAAAA,EAAAA,MAAA,QAAMvC,UAAWwC,IAAW,eAAgBxC,MAAgBC,EAAIwC,SAAA,EAC9DC,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAAC3C,UAAU,sBAAqByC,SAAE7C,KACjD8C,EAAAA,EAAAA,KAAA,QAAM,iBAAY1C,UAAU,wBAAwB4C,IAAKtC,MACpD,EAIX,GAAeuC,EAAAA,EAAAA,MAAKnD,E,4JCvFpB,MA8CA,EA9CgBC,IAQT,IARU,SACf8C,EAAQ,MACRK,EAAQ,EAAC,GACTC,EAAE,MACFC,EAAQ,OAAM,OACdC,EAAS,SAAQ,UACjBjD,KACGC,GACJN,EACC,MAAMuD,EAAezB,KAAK0B,IAAI1B,KAAK2B,IAAIN,EAAO,GAAI,GAC5CO,EAAYN,GAAO,IAAGtB,KAAK2B,IAAIF,EAAc,KAEnD,OACEX,EAAAA,EAAAA,MAACe,EAAAA,SAAQ,CAAAb,SAAA,CAEK,SAAXQ,IACCV,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAAAd,SAAA,EACLC,EAAAA,EAAAA,KAAA,QAAMc,IAAI,UAAUC,KAAMC,EAAYX,GAAG,OAAOY,YAAY,MAC5DjB,EAAAA,EAAAA,KAAA,SAAAD,SACI,qIAIaiB,gGAOrBhB,EAAAA,EAAAA,KAACW,EAAS,CACRrD,UAAWwC,IACTxC,EACA,UACC,kBAAiBgD,IACjB,kBAAiBE,IACjB,mBAAkBD,QAEjBhD,EAAIwC,SAEPA,MAEM,C,kEC7Cf,MA6BA,EA7Ba9C,IASN,IATO,SACZ8C,EAAQ,KACRmB,EAAO,IACPb,GAAIM,EAAY,IAAG,MACnBL,EAAQ,OAAM,OACdC,EAAS,OAAM,UACfY,EAAS,UACT7D,KACGC,GACJN,EACC,OACE+C,EAAAA,EAAAA,KAACW,EAAS,CACRrD,UAAWwC,IACTxC,EACA,OACC,eAAcgD,IACd,cAAaY,IACb,gBAAeX,IAChB,CACE,kBAAmBY,OAGnB5D,EAAIwC,SAEPA,GACS,C,yKC6ChB,QA9DA,WACE,OACEF,EAAAA,EAAAA,MAAA,WAASvC,UAAU,WAAUyC,SAAA,EAC3BF,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAAAd,SAAA,EACLC,EAAAA,EAAAA,KAAA,SAAOoB,IAAI,QAAOrB,SAAC,qBACnBC,EAAAA,EAAAA,KAAA,QAAMqB,KAAK,cAAcnD,QAAQ,oDAEnC8B,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAM,EAACC,IAAI,EAAMC,QAAS,EAAGC,QAASC,EAAAA,GAAO5B,SACtD6B,IACC5B,EAAAA,EAAAA,KAACY,EAAAA,SAAQ,CAAAb,UACPC,EAAAA,EAAAA,KAAA,OAAK1C,UAAU,oBAAmByC,UAChCF,EAAAA,EAAAA,MAAA,OAAKvC,UAAU,iBAAgByC,SAAA,EAC7BC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAO,CACNvE,UAAWwC,IAAW,kBAAoB,oBAAmB8B,KAC7DxB,MAAO,EAAEL,SACV,SAGDC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAO,CACN,iBACAvE,UAAWwC,IACT,uBACC,yBAAwB8B,KAE3BvB,GAAG,KACHD,MAAO,EAAEL,UAETC,EAAAA,EAAAA,KAAChD,EAAAA,EAAW,CACVE,KAAK,kBACLC,MAAkB,WAAXyE,EACPxE,MAAO,SAGX4C,EAAAA,EAAAA,KAAC8B,EAAAA,EAAI,CACHxE,UAAWwC,IACT,wBACC,0BAAyB8B,KAC1B7B,SACH,+BAGDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLZ,WAAS,EACTa,gBAAc,EACd1E,UAAWwC,IACT,mBACC,qBAAoB8B,KAEvBb,KAAK,IACLkB,KAAK,eAAclC,SACpB,gCAUjB,C,gCCnEA,MACA,EAD0C,cAAxBmC,UAAUC,S,+CCH5B,SAAiB,C","sources":["components/DecoderText/index.js","components/Heading/index.js","components/Text/index.js","pages/404/index.js","utils/prerender.js","webpack://qiming-liu.github.io/./src/pages/404/index.css?70ac"],"sourcesContent":["import { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport prerender from 'utils/prerender';\nimport { glyphList } from 'app/config';\nimport './index.css';\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphList.length);\n      return { type: CharType.Glyph, value: glyphList[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !prerender) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { Helmet } from 'react-helmet';\nimport { Button } from 'components/Button';\nimport DecoderText from 'components/DecoderText';\nimport { reflow } from 'utils/transition';\nimport Heading from 'components/Heading';\nimport Text from 'components/Text';\nimport './index.css';\n\nfunction NotFound() {\n  return (\n    <section className=\"page-404\">\n      <Helmet>\n        <title tag=\"title\">404 | Not Found</title>\n        <meta name=\"description\" content=\"404 page not found. This page doesn't exist\" />\n      </Helmet>\n      <Transition appear in={true} timeout={0} onEnter={reflow}>\n        {status => (\n          <Fragment>\n            <div className=\"page-404__details\">\n              <div className=\"page-404__text\">\n                <Heading\n                  className={classNames('page-404__title', `page-404__title--${status}`)}\n                  level={0}\n                >\n                  404\n                </Heading>\n                <Heading\n                  aria-hidden\n                  className={classNames(\n                    'page-404__subheading',\n                    `page-404__subheading--${status}`\n                  )}\n                  as=\"h2\"\n                  level={3}\n                >\n                  <DecoderText\n                    text=\"Error: Redacted\"\n                    start={status !== 'exited'}\n                    delay={300}\n                  />\n                </Heading>\n                <Text\n                  className={classNames(\n                    'page-404__description',\n                    `page-404__description--${status}`\n                  )}\n                >\n                  This page is coming soon.\n                </Text>\n                <Button\n                  secondary\n                  iconHoverShift\n                  className={classNames(\n                    'page-404__button',\n                    `page-404__button--${status}`\n                  )}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </Transition>\n    </section>\n  );\n}\n\nexport default NotFound;\n","/**\n * Returns true if being prerendered by react-snap. Useful for stuff\n * that needs to only run client-side and not during prerendering\n */\nconst prerender = navigator.userAgent === 'ReactSnap';\nexport default prerender;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["CharType","DecoderText","_ref","text","start","delay","startDelay","className","rest","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","content","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","Math","floor","random","glyphList","length","shuffle","prerender","chain","spring","from","to","stiffness","damping","stop","_jsxs","classNames","children","_jsx","VisuallyHidden","ref","memo","level","as","align","weight","clampedLevel","min","max","Component","Fragment","Helmet","rel","href","GothamBold","crossorigin","size","secondary","tag","name","Transition","appear","in","timeout","onEnter","reflow","status","Heading","Text","Button","iconHoverShift","icon","navigator","userAgent"],"sourceRoot":""}